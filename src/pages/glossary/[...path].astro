---
import { getCollection } from "astro:content";
import GlossaryLayout from "../../layouts/GlossaryLayout.astro";
import Breadcrumbs from '@/components/recruiting/Breadcrumbs.astro';

export async function getStaticPaths() {
  const glossaryEntries = await getCollection("glossary");
  
  return glossaryEntries.map(entry => ({
    params: { 
      path: `${entry.data.category.toLowerCase().replace(/\s+/g, '-')}/${entry.data.vertical.toLowerCase().replace(/\s+/g, '-')}/${entry.slug}`
    },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Get rendered content and convert to plain text (same as BlogLayout)
const renderedContent = await Astro.slots.render('default');
const plainTextContent = renderedContent ? renderedContent.replace(/<[^>]*>/g, '') : entry.body;

// TechArticle Schema
const techArticleSchema = {
  "@context": "https://schema.org",
  "@type": "TechArticle",
  "headline": `What is ${entry.data.term} in ${entry.data.vertical}?`,
  "name": `${entry.data.term} - ${entry.data.vertical} Term Definition`,
  "description": entry.data.description,
  "keywords": [
    entry.data.category,
    entry.data.vertical,
    entry.data.term,
    "technical term",
    "definition",
    ...entry.data.details
      .find(detail => detail.title === "Related Terms")?.value
      .split(",")
      .map(term => term.trim()) || []
  ],
  "articleBody": plainTextContent,
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": new URL(Astro.url.pathname, Astro.site).toString()
  },
  "author": {
    "@type": "Organization",
    "name": "Tustin Recruiting",
    "url": "https://www.tustinrecruiting.com"
  },
  "publisher": {
    "@type": "Organization",
    "name": "Tustin Recruiting",
    "url": "https://www.tustinrecruiting.com",
    "logo": {
      "@type": "ImageObject",
      "url": "https://www.tustinrecruiting.com/images/LOGO1.png"
    }
  },
  "datePublished": new Date().toISOString(),
  "dateModified": new Date().toISOString(),
  "image": "https://www.tustinrecruiting.com/images/LOGO1.png"
};

const breadcrumbs = [
  { text: 'Home', href: '/' },
  { text: 'Glossary', href: '/glossary' },
  { text: entry.data.category, href: `/glossary/${entry.data.category.toLowerCase().replace(/\s+/g, '-')}` },
  { 
    text: entry.data.vertical, 
    href: `/glossary/${entry.data.category.toLowerCase().replace(/\s+/g, '-')}/${entry.data.vertical.toLowerCase().replace(/\s+/g, '-')}` 
  },
  {
    text: entry.data.term,
    href: `/glossary/${entry.data.category.toLowerCase().replace(/\s+/g, '-')}/${entry.data.vertical.toLowerCase().replace(/\s+/g, '-')}/${entry.slug}`,
    current: true
  }
];
---

<GlossaryLayout frontmatter={entry.data}>
  <Fragment slot="head">
    <link rel="canonical" href={new URL(Astro.url.pathname, Astro.site).toString()} />
    <script type="application/ld+json" set:html={JSON.stringify(techArticleSchema, null, 2)} />
  </Fragment>
  <Content />
</GlossaryLayout> 