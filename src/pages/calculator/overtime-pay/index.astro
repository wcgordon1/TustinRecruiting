---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { overtimeRules } from "../../../data/overtime-rules.mjs";
import IndexJobs from "@/components/jobs/IndexJobs.astro";
import CtaOne from "@/components/cta/CtaOne.astro";
import CtaWack from "@/components/cta/CtaWack.astro";
import MoreEntries from "@/components/blog/MoreEntries.astro";
import Breadcrumbs from "@/components/calculator/Breadcrumbs.astro";
const states = Object.keys(overtimeRules).sort();
const rules = overtimeRules.Federal;

// Group states for the dropdown
const stateGroups = {
    "States with Special Rules": ["California", "Alaska", "Nevada", "Colorado"],
    "States Following Federal Rules": Object.keys(overtimeRules)
        .filter(state => !["Federal", "California", "Alaska", "Nevada", "Colorado"].includes(state))
        .sort()
};

const title = "Overtime Pay Calculator - Calculate Your Overtime Rate";
const description = "Calculate your overtime pay rate based on federal and state-specific rules. Includes daily and weekly overtime calculations. Calculator by Tustin Recruiting.";

// Structured Data for SEO
const jsonLd = {
    "@context": "https://schema.org",
    "@type": "WebApplication",
    "name": "Federal Overtime Calculator",
    "description": description,
    "applicationCategory": "CalculatorApplication",
    "operatingSystem": "Web Browser",
    "offers": {
        "@type": "Offer",
        "price": "0",
        "priceCurrency": "USD"
    }
};
---

<BaseLayout {title} {description}>
    <Fragment slot="head">
        <script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />
        <link rel="canonical" href={new URL(Astro.url.pathname, Astro.site).toString()} />
    </Fragment>

    <div class="max-w-4xl mx-auto p-6">
        <Breadcrumbs currentPage="Overtime Pay Calculator" />
        <h1 class="tracking-tighter text-4xl font-bold mb-6">Federal Overtime Pay Calculator</h1>
        
        <div class="bg-white rounded-lg shadow p-6 mb-8">
            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-700 mb-2">
                    Select Your State for State-Specific Rules
                </label>
                <div x-data="{ open: false }" class="relative">
                    <button 
                        @click="open = !open"
                        @click.away="open = false"
                        type="button"
                        class="w-full p-3 border rounded-lg bg-white text-left flex justify-between items-center hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                        <span>Federal (FLSA)</span>
                        <svg class="h-5 w-5 text-gray-700" fill="currentColor" viewBox="0 0 20 20">
                            <path clip-rule="evenodd" fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" />
                        </svg>
                    </button>
                    
                    <div 
                        x-show="open"
                        x-transition:enter="transition ease-out duration-100"
                        x-transition:enter-start="transform opacity-0 scale-95"
                        x-transition:enter-end="transform opacity-100 scale-100"
                        x-transition:leave="transition ease-in duration-75"
                        x-transition:leave-start="transform opacity-100 scale-100"
                        x-transition:leave-end="transform opacity-0 scale-95"
                        class="absolute z-50 mt-2 w-full bg-white rounded-lg shadow-lg border border-gray-200 max-h-[80vh] overflow-y-auto"
                    >
                        <div class="p-4">
                            <div class="mb-4">
                                <h3 class="text-sm font-semibold text-gray-900 mb-3">States with Special Rules</h3>
                                <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-2">
                                    {stateGroups["States with Special Rules"].map(s => (
                                        <a
                                            href={`/calculator/overtime-pay/${s.toLowerCase()}`}
                                            class="px-3 py-2 text-sm rounded-md text-center transition-colors hover:bg-gray-100 text-gray-700"
                                        >
                                            {s}
                                        </a>
                                    ))}
                                </div>
                            </div>
                            
                            <div>
                                <h3 class="text-sm font-semibold text-gray-900 mb-3">States Following Federal Rules</h3>
                                <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-2">
                                    {stateGroups["States Following Federal Rules"].map(s => (
                                        <a
                                            href={`/calculator/overtime-pay/${s.toLowerCase()}`}
                                            class="px-3 py-2 text-sm rounded-md text-center transition-colors hover:bg-gray-100 text-gray-700"
                                        >
                                            {s}
                                        </a>
                                    ))}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <p class="mt-2 text-sm text-gray-500">
                    Select a state to see state-specific overtime rules
                </p>
            </div>

            <div x-data="{
                regularHours: '',
                hourlyRate: '',
                calculatePay() {
                    const hours = Number(this.regularHours) || 0;
                    const rate = Number(this.hourlyRate) || 0;
                    const overtime = Math.max(0, hours - 40);
                    const regularPay = Math.min(hours, 40) * rate;
                    const overtimePay = overtime * (rate * 1.5);
                    return {
                        regular: regularPay.toFixed(2),
                        overtime: overtimePay.toFixed(2),
                        total: (regularPay + overtimePay).toFixed(2)
                    };
                }
            }">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="relative">
                        <label for="hours" class="block text-xl font-bold text-gray-900 mb-1">
                            Total Hours Worked (Week)
                        </label>
                        <div class="relative">
                            <input 
                                type="number" 
                                id="hours"
                                x-model="regularHours"
                                placeholder="0"
                                class="w-full p-3 border rounded-lg transition-colors focus:ring-2 focus:ring-blue-500 focus:border-blue-500 hover:border-blue-300"
                                min="0"
                                max="168"
                                step="0.5"
                            >
                            <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                                <span class="text-gray-500">hrs</span>
                            </div>
                        </div>
                    </div>

                    <div class="relative">
                        <label for="rate" class="block text-xl font-bold text-gray-900 mb-1">
                            Hourly Rate
                        </label>
                        <div class="relative">
                            <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                                <span class="text-gray-500">$</span>
                            </div>
                            <input 
                                type="number" 
                                id="rate"
                                x-model="hourlyRate"
                                placeholder="0"
                                class="w-full pl-8 p-3 border rounded-lg transition-colors focus:ring-2 focus:ring-blue-500 focus:border-blue-500 hover:border-blue-300"
                                min="0"
                                step="0.01"
                            >
                            <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                                <span class="text-gray-500">/hr</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-8 p-6 bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg border border-blue-200">
                    <h3 class="text-lg font-semibold text-blue-900 mb-4">Calculation Results</h3>
                    <div class="space-y-3">
                        <div class="flex justify-between items-center text-sm">
                            <span class="text-gray-600">Regular Hours:</span>
                            <span class="font-medium" x-text="Math.min(Number(regularHours) || 0, 40) + ' hrs'">0 hrs</span>
                        </div>
                        <div class="flex justify-between items-center text-sm">
                            <span class="text-gray-600">Regular Pay:</span>
                            <span class="font-medium">$<span x-text="Number(calculatePay().regular).toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})">0.00</span></span>
                        </div>
                        <div class="flex justify-between items-center text-sm">
                            <span class="text-gray-600">Overtime Hours (1.5×):</span>
                            <span class="font-medium" x-text="Math.max(0, (Number(regularHours) || 0) - 40) + ' hrs'">0 hrs</span>
                        </div>
                        <div class="flex justify-between items-center text-sm">
                            <span class="text-gray-600">Overtime Pay (1.5×):</span>
                            <span class="font-medium">$<span x-text="Number(calculatePay().overtime).toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})">0.00</span></span>
                        </div>
                        <div class="h-px bg-blue-200 my-2"></div>
                        <div class="flex justify-between items-center text-blue-900">
                            <span class="font-semibold">Total Pay:</span>
                            <span class="text-lg font-bold">$<span x-text="Number(calculatePay().total).toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})">0.00</span></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="prose max-w-none">
            <h2>Federal Overtime Rules (FLSA)</h2>
            <p>Under the Fair Labor Standards Act (FLSA), overtime pay must be at least 1.5 times regular pay for hours worked beyond 40 in a workweek.</p>
            
            <h3>Key Points:</h3>
            <ul>
                <li>Overtime rate is 1.5× regular hourly rate</li>
                <li>Applies after {rules.weekly_limit} hours in a workweek</li>
                <li>Workweek is any fixed, regularly recurring 168-hour period</li>
            </ul>
            
            <p class="text-sm text-gray-600 mt-4">
                Note: This calculator provides estimates based on standard overtime rules. Actual overtime pay may vary based on specific employment agreements, collective bargaining agreements, or other factors.
            </p>
        </div>
        <div class="mt-24">
            <MoreEntries />
        </div>
        <IndexJobs />
    </div>
    <CtaOne />
    <CtaWack />
</BaseLayout>
