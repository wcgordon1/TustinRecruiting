---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { salaryTypes } from "../../../data/salary-types.mjs";
import IndexJobs from "@/components/jobs/IndexJobs.astro";
import CtaOne from "@/components/cta/CtaOne.astro";
import MoreEntries from "@/components/blog/MoreEntries.astro";
import Breadcrumbs from "@/components/calculator/Breadcrumbs.astro";

export function getStaticPaths() {
    return Object.keys(salaryTypes).map(type => ({
        params: { type },
        props: { typeData: salaryTypes[type], typeName: type }
    }));
}

const { type } = Astro.params;
const { typeData, typeName } = Astro.props;

const title = `${typeData.label} Converter Calculator`;
const description = typeData.description;

// Breadcrumb paths
const paths = [
    { text: "Home", href: "/" },
    { text: "Calculators", href: "/calculator" },
    { text: "Salary Converter", href: "/calculator/salary-converter" },
    { text: typeData.label, href: `/calculator/salary-converter/${type}`, current: true }
];

// Structured Data for SEO
const jsonLd = {
    "@context": "https://schema.org",
    "@type": "WebApplication",
    "name": title,
    "description": description,
    "applicationCategory": "CalculatorApplication",
    "operatingSystem": "Web Browser",
    "offers": {
        "@type": "Offer",
        "price": "0",
        "priceCurrency": "USD"
    }
};

// Prepare conversion data for client-side
const clientData = {
    type: typeName,
    ...typeData
};
---

<BaseLayout {title} {description}>
    <Fragment slot="head">
        <script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />
        <script define:vars={{ clientData }}>
            // Make conversion data available to client-side JavaScript
            window.salaryData = clientData;
        </script>
        <link rel="canonical" href={new URL(Astro.url.pathname, Astro.site).toString()} />
    </Fragment>

    <div class="max-w-4xl mx-auto p-6">
        <Breadcrumbs currentPage="Salary Converter" state={typeData.label} />
        <h1 class="tracking-tighter text-4xl font-bold mb-6">{title}</h1>
        
        <div class="bg-white rounded-lg shadow p-6 mb-8">
            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-700 mb-2">
                    Change Salary Type
                </label>
                <div x-data="{ open: false }" class="relative">
                    <button 
                        @click="open = !open"
                        @click.away="open = false"
                        type="button"
                        class="w-full p-3 border rounded-lg bg-white text-left flex justify-between items-center hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                        <span>{typeData.label}</span>
                        <svg class="h-5 w-5 text-gray-700" fill="currentColor" viewBox="0 0 20 20">
                            <path clip-rule="evenodd" fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" />
                        </svg>
                    </button>
                    
                    <div 
                        x-show="open"
                        x-transition:enter="transition ease-out duration-100"
                        x-transition:enter-start="transform opacity-0 scale-95"
                        x-transition:enter-end="transform opacity-100 scale-100"
                        x-transition:leave="transition ease-in duration-75"
                        x-transition:leave-start="transform opacity-100 scale-100"
                        x-transition:leave-end="transform opacity-0 scale-95"
                        class="absolute z-50 mt-2 w-full bg-white rounded-lg shadow-lg border border-gray-200"
                    >
                        <div class="p-4">
                            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-2">
                                {Object.entries(salaryTypes).map(([t, data]) => (
                                    <a
                                        href={`/calculator/salary-converter/${t}`}
                                        class={`px-4 py-3 text-sm rounded-md text-center transition-colors ${
                                            t === type 
                                                ? 'bg-blue-100 text-blue-700 font-medium' 
                                                : 'hover:bg-gray-100 text-gray-700'
                                        } flex flex-col items-center justify-center`}
                                    >
                                        <span class="font-medium">{data.label}</span>
                                        <span class="text-xs text-gray-500 mt-1">{data.inputSuffix}</span>
                                    </a>
                                ))}
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div x-data="{
                amount: '',
                data: window.salaryData,
                calculateAll() {
                    const value = Number(this.amount) || 0;
                    const results = {};
                    
                    // Calculate conversions based on the input type
                    if (this.data.type === 'hourly') {
                        results.hourly = value;
                        Object.entries(this.data.conversions).forEach(([period, multiplier]) => {
                            results[period] = value * multiplier;
                        });
                    } else {
                        // For non-hourly inputs, calculate using the conversion ratios
                        Object.entries(this.data.conversions).forEach(([period, ratio]) => {
                            results[period] = value * ratio;
                        });
                        // Add the original type's value
                        results[this.data.type] = value;
                    }
                    
                    return {
                        ...results,
                        // Calculate tax brackets based on annual salary
                        taxBrackets: this.calculateTaxBrackets(results.annually || 0)
                    };
                },
                calculateTaxBrackets(annualSalary) {
                    return {
                        '10%': (annualSalary * 0.9).toFixed(2),
                        '20%': (annualSalary * 0.8).toFixed(2),
                        '30%': (annualSalary * 0.7).toFixed(2),
                        '40%': (annualSalary * 0.6).toFixed(2)
                    };
                },
                formatCurrency(value) {
                    return Number(value).toLocaleString('en-US', {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });
                }
            }">
                <div class="relative mb-8">
                    <label :for="data.type" class="block text-xl font-bold text-gray-900 mb-1" x-text="data.inputLabel">
                    </label>
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                            <span class="text-gray-500" x-text="data.inputPrefix"></span>
                        </div>
                        <input 
                            :id="data.type"
                            type="number" 
                            x-model="amount"
                            placeholder="0"
                            class="w-full pl-8 p-3 border rounded-lg transition-colors focus:ring-2 focus:ring-blue-500 focus:border-blue-500 hover:border-blue-300"
                            min="0"
                            step="0.01"
                        >
                        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                            <span class="text-gray-500" x-text="data.inputSuffix"></span>
                        </div>
                    </div>
                </div>

                <!-- Results Section -->
                <div class="space-y-8">
                    <!-- Pay Period Conversions -->
                    <div class="p-6 bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg border border-blue-200">
                        <h3 class="text-lg font-semibold text-blue-900 mb-4">Pay Period Conversions</h3>
                        <div class="space-y-3">
                            <template x-for="(label, period) in {
                                hourly: 'Hourly Rate',
                                weekly: 'Weekly Salary',
                                biweekly: 'Bi-Weekly Salary',
                                monthly: 'Monthly Salary',
                                quarterly: 'Quarterly Salary',
                                annually: 'Annual Salary'
                            }">
                                <div class="flex justify-between items-center text-sm">
                                    <span class="text-gray-600" x-text="label"></span>
                                    <span class="font-medium">
                                        $<span x-text="formatCurrency(calculateAll()[period] || 0)"></span>
                                    </span>
                                </div>
                            </template>
                        </div>
                    </div>

                    <!-- Annual Tax Brackets -->
                    <div class="p-6 bg-gradient-to-br from-green-50 to-green-100 rounded-lg border border-green-200">
                        <h3 class="text-lg font-semibold text-green-900 mb-4">Annual Salary After Taxes</h3>
                        <div class="space-y-3">
                            <template x-for="(rate, bracket) in calculateAll().taxBrackets">
                                <div class="flex justify-between items-center text-sm">
                                    <span class="text-gray-600" x-text="`${bracket} Tax Rate:`"></span>
                                    <span class="font-medium">$<span x-text="formatCurrency(rate)"></span></span>
                                </div>
                            </template>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="prose max-w-none">
            <h2>About {typeData.label} Conversions</h2>
            <p>{typeData.description}</p>
            
            <h3>Assumptions:</h3>
            <ul>
                <li>Standard 40-hour work week</li>
                <li>52 weeks per year</li>
                <li>2,080 total work hours per year</li>
                <li>Bi-weekly pay is every two weeks (26 pay periods)</li>
                <li>Monthly calculations use 4.333 weeks per month (52/12)</li>
            </ul>
            
            <p class="text-sm text-gray-600 mt-4">
                Note: These calculations are estimates based on standard work periods. Actual pay may vary based on your specific work schedule, overtime, and employer policies.
            </p>
        </div>
    </div>
    <MoreEntries />
    <IndexJobs />
    <CtaOne />
</BaseLayout> 