---
import { getCollection } from "astro:content";

const allJobs = await getCollection("jobs");

// Get unique teams and categories
const teams = [...new Set(allJobs.map(job => job.data.team))].sort();
const categories = [...new Set(allJobs.map(job => job.data.occupationalCategory))].sort();

// Get current filters from URL
const { searchParams } = Astro.url;
const currentTeam = searchParams.get('team');
const currentCategory = searchParams.get('category');
---

<div class="lg:sticky lg:top-8">
  <div class="bg-slate-50 rounded-3xl p-4 lg:p-6">
    <!-- Salary Sort -->
    <div class="pl-3">
      <h3 class="text-lg font-medium text-purple-900 mb-2">Pay</h3>
      <div class="flex lg:flex-col flex-wrap gap-3 lg:gap-1">
        <label class="flex items-center space-x-2">
          <input 
            type="radio" 
            name="salary-sort" 
            value="high-low" 
            class="text-blue-600 focus:ring-blue-500 size-3"
          >
          <span class="text-slate-500 text-sm">Highest to Lowest</span>
        </label>
        <label class="flex items-center space-x-2">
          <input 
            type="radio" 
            name="salary-sort" 
            value="low-high" 
            class="text-blue-600 focus:ring-blue-500 size-3"
          >
          <span class="text-slate-500 text-sm">Lowest to Highest</span>
        </label>
      </div>
    </div>

    <!-- Teams Filter -->
    <div class="pl-3">
      <h3 class="text-lg font-medium text-purple-900 mt-2 mb-2">Industry</h3>
      <div class="flex lg:flex-col flex-wrap gap-3 lg:gap-1">
        {teams.map((team) => (
          <label class="flex items-center space-x-2">
            <input 
              type="radio" 
              name="team" 
              value={team.toString()}
              checked={currentTeam === team}
              class="text-blue-600 focus:ring-blue-500 size-3"
              data-preserve-filters="true"
            >
            <span class="text-slate-500 text-sm">{team}</span>
          </label>
        ))}
      </div>
    </div>

    <!-- Categories Filter -->
    <div class="pl-3">
      <h3 class="text-lg font-medium text-purple-900 mt-2 mb-2">Role</h3>
      <div class="flex lg:flex-col flex-wrap gap-3 lg:gap-1">
        {categories.map((category) => (
          <label class="flex items-center space-x-2">
            <input 
              type="radio" 
              name="category" 
              value={category.toString()}
              checked={currentCategory === category}
              class="text-blue-600 focus:ring-blue-500 size-3"
              data-preserve-filters="true"
            >
            <span class="text-slate-500 text-sm">{category}</span>
          </label>
        ))}
      </div>
    </div>

    <!-- Reset Button -->
    <button
      id="resetFilters"
      class="block w-full text-center text-white bg-blue-500 hover:bg-blue-600 font-medium py-2 rounded-full mt-6"
    >
      Reset Filters
    </button>
  </div>
</div>

<script>
  interface Filters {
    salary: string | null;
    team: string | null;
    category: string | null;
  }

  let activeFilters: Filters = {
    salary: null,
    team: null,
    category: null
  };

  function filterJobs() {
    const jobItems = document.querySelectorAll<HTMLElement>('.job-item');

    jobItems.forEach(item => {
      const team = item.dataset.team || '';
      const category = item.dataset.category || '';
      const salary = parseInt(item.dataset.salary || '0');

      const matchesTeam = !activeFilters.team || team === activeFilters.team;
      const matchesCategory = !activeFilters.category || category === activeFilters.category;

      item.style.display = (matchesTeam && matchesCategory) ? '' : 'none';

      // Handle salary sorting
      if (activeFilters.salary) {
        const jobList = document.querySelector<HTMLElement>('.job-list');
        if (!jobList) return;

        const items = Array.from(jobList.children) as HTMLElement[];
        items.sort((a, b) => {
          const salaryA = parseInt(a.dataset.salary || '0');
          const salaryB = parseInt(b.dataset.salary || '0');
          return activeFilters.salary === 'high-low' ? salaryB - salaryA : salaryA - salaryB;
        });

        items.forEach(item => jobList.appendChild(item));
      }
    });

    // Trigger check for no results
    document.dispatchEvent(new CustomEvent('checkResults'));
  }

  // Event Listeners for Radio Buttons
  document.querySelectorAll<HTMLInputElement>('input[type="radio"]').forEach(radio => {
    radio.addEventListener('change', (e) => {
      const target = e.target as HTMLInputElement;
      const filterType = target.name.split('-')[0] as keyof Filters;
      activeFilters[filterType] = target.value;
      filterJobs();
    });
  });

  // Reset Filters
  const resetButton = document.getElementById('resetFilters');
  if (resetButton) {
    resetButton.addEventListener('click', () => {
      // Reset all filters
      activeFilters = { salary: null, team: null, category: null };
      document.querySelectorAll<HTMLInputElement>('input[type="radio"]')
        .forEach(radio => radio.checked = false);
      
      // Reset search
      document.dispatchEvent(new CustomEvent('resetSearch'));
      
      // Reset job visibility
      document.querySelectorAll<HTMLElement>('.job-item')
        .forEach(item => item.style.display = '');

      // Check for results
      document.dispatchEvent(new CustomEvent('checkResults'));

      // Scroll to search container
      const searchContainer = document.getElementById('searchContainer');
      if (searchContainer) {
        searchContainer.scrollIntoView({ behavior: 'smooth' });
      }
    });
  }
</script> 