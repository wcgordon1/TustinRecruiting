---
import CtaGloss from "@/components/cta/CtaGloss.astro";
import CtaGlossary from "@/components/cta/CtaGlossary.astro";
import BaseLayout from "./BaseLayout.astro";
import { Icon } from 'astro-icon/components';
import CtaWack from "@/components/cta/CtaWack.astro";
import { getCollection } from 'astro:content';

const { frontmatter } = Astro.props;
console.log('GlossaryLayout frontmatter:', frontmatter); // Debug log

// Add type checking and debug
type Frontmatter = {
  term: string;
  vertical: string;
  description: string;
  // ... other properties
};

// Debug log to verify data
console.log('Frontmatter:', frontmatter);

// Get all glossary entries for related terms linking
const glossaryEntries = await getCollection('glossary');

// Helper function to create URL-safe slugs
const createSlug = (text: string) => text.toLowerCase().replace(/\s+/g, '-');

// SEO
const seoTitle = `${frontmatter.term} - ${frontmatter.vertical} Glossary`;
const seoDescription = frontmatter.description.slice(0, 160) + (frontmatter.description.length > 160 ? '...' : '');

// Enhanced JSON-LD
const jsonLd = {
  "@context": "https://schema.org",
  "@type": ["Article", "TechArticle"],
  "headline": `What is ${frontmatter.term} in ${frontmatter.vertical} Work?`,
  "name": `${frontmatter.term} - Electrical Industry Term Definition`,
  "articleBody": frontmatter.description,
  "description": frontmatter.description,
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": new URL(Astro.url.pathname, Astro.site).toString()
  },
  "author": {
    "@type": "Organization",
    "name": "Tustin Recruiting",
    "url": "https://www.tustinrecruiting.com"
  },
  "publisher": {
    "@type": "Organization",
    "name": "Tustin Recruiting",
    "url": "https://www.tustinrecruiting.com",
    "logo": {
      "@type": "ImageObject",
      "url": "https://www.tustinrecruiting.com/images/LOGO1.png"
    }
  }
};

// Canonical URL
const canonicalURL = new URL(Astro.url.pathname, Astro.site).toString();
---

<BaseLayout title={seoTitle} description={seoDescription}>
  <div slot="head">
    <link rel="canonical" href={canonicalURL} />
    <script type="application/ld+json" set:html={JSON.stringify(jsonLd, null, 2)} />
  </div>

  <main>
    <section class="bg-white">
      <div class="mx-auto max-w-7xl lg:px-16 md:px-12 px-8 xl:px-24 py-24">
        <div class="grid grid-cols-1 gap-8 lg:grid-cols-3">
          <div class="lg:col-span-2">
            <h1 class="text-4xl font-bold tracking-tight text-purple-900 sm:text-5xl">
              {frontmatter.term}
            </h1>
            <p class="mt-6 text-xl leading-8 text-slate-500">
              {frontmatter.description}
            </p>
            
            <h2 class="text-2xl font-bold tracking-tight text-purple-900 sm:text-3xl mt-12">
              What is {frontmatter.term} in {frontmatter.vertical || 'Electrical'}?
            </h2>
            <div class="prose prose-lg prose-purple max-w-none mt-12">
              <slot />
            </div>
          </div>

          <div>
            <div class="sticky top-8">
              <div class="bg-slate-50 rounded-3xl p-8">
                {frontmatter?.icon && (
                  <div class="flex justify-start mb-6">
                    <Icon 
                      name={`mdi:${frontmatter.icon.replace('mdi:', '')}`} 
                      class="w-12 h-12 text-blue-500" 
                      aria-hidden="true"
                    />
                  </div>
                )}

                <h3 class="text-2xl font-bold tracking-tight text-purple-900 sm:text-3xl">
                  {frontmatter.term} 
                </h3>
                
                <div class="mt-8 space-y-6">
                  {frontmatter.details.map(detail => (
                    <div>
                      <h3 class="text-lg font-medium text-purple-900">
                        {detail.title}
                      </h3>
                      {detail.title === "Category" ? (
                        <h4 class="mt-2 text-sm text-slate-500">
                          <a 
                            href={`/glossary/${createSlug(detail.value)}`}
                            class="text-blue-600 hover:underline"
                          >
                            {detail.value}
                          </a>
                        </h4>
                      ) : detail.title === "Industry" || detail.title === "Vertical" ? (
                        <h4 class="mt-2 text-sm text-slate-500">
                          <a 
                            href={`/glossary/${createSlug(frontmatter.category)}/${createSlug(detail.value)}`}
                            class="text-blue-600 hover:underline"
                          >
                            {detail.value}
                          </a>
                        </h4>
                      ) : detail.title === "Related Terms" ? (
                        <div class="mt-2 space-y-2">
                          {detail.value.split(',').map(term => {
                            const relatedEntry = glossaryEntries.find(entry => 
                              entry.data.term.trim() === term.trim()
                            );
                            if (relatedEntry) {
                              return (
                                <a 
                                  href={`/glossary/${createSlug(relatedEntry.data.category)}/${createSlug(relatedEntry.data.vertical)}/${relatedEntry.slug}`}
                                  class="block text-blue-600 hover:underline text-sm"
                                >
                                  {term.trim()}
                                </a>
                              );
                            }
                            return <span class="text-sm text-slate-500">{term.trim()}</span>;
                          })}
                        </div>
                      ) : (
                        <h4 class="mt-2 text-sm text-slate-500">
                          {detail.url ? (
                            <a href={detail.url} class="text-blue-600 hover:underline">
                              {detail.value}
                            </a>
                          ) : (
                            detail.value
                          )}
                        </h4>
                      )}
                    </div>
                  ))}
                </div>

                <div class="mt-12 space-y-4">
                  <a href="/glossary" class="text-white items-center font-medium gap-3 inline-flex focus-visible:outline-2 focus-visible:outline-offset-2 focus:outline-none justify-center px-6 lg:px-8 ring-2 ring-transparent focus:ring-offset-2 focus:ring-blue-500 duration-200 py-3.5 rounded-full active:bg-blue-800 active:text-white bg-blue-500 hover:bg-blue-600 w-full">
                    Glossary Terms
                  </a>
                  <a href="/contact" class="text-blue-500 items-center font-medium gap-3 inline-flex focus-visible:outline-2 focus-visible:outline-offset-2 focus:outline-none justify-center px-6 lg:px-8 ring-2 ring-current focus:ring-offset-2 focus:ring-blue-500 duration-200 py-3.5 rounded-full hover:text-blue-600 w-full">
                    Schedule a Call
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>
  <CtaGloss frontmatter={frontmatter} />
  <CtaGlossary />
  <CtaWack />
</BaseLayout> 